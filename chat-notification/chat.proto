syntax = "proto3";

package chat;

option go_package = "github.com/skillsync/skillsync-protos/gen/chatpb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

enum MessageStatus {
    SENT = 0;
    DELIVERED = 1;
    READ = 2;
}

message Message {
    string id = 1;
    string sender_id = 2;
    string receiver_id = 3;
    string content = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    string job_id = 7;
    bool is_broadcast = 8;
    MessageStatus status = 9;
    string message_type = 10;
}

message SendMessageRequest {
    string receiver_id = 1;
    string content = 2;
    string job_id = 3;
    bool is_broadcast = 4;
    string message_type = 5;
}

message SendMessageResponse {
    string message_id = 1;
    bool success = 2;
}

message GetMessagesRequest {
    string user_id = 1;
    string other_user_id = 2;
    string job_id = 3;
    int32 page = 4;
    int32 limit = 5;
}

message GetMessagesResponse {
    repeated Message messages = 1;
    int32 total = 2;
}

message BroadcastMessageRequest {
    string job_id = 1;
    string content = 2;
    string message_type = 3;
}

message BroadcastMessageResponse {
    bool success = 1;
    int32 recipients_count = 2;
}

message UpdateMessageStatusRequest {
    string message_id = 1;
    MessageStatus status = 2;
}

message UpdateMessageStatusResponse {
    bool success = 1;
}

message GetConversationsRequest {
    string user_id = 1;
    int32 page = 2;
    int32 limit = 3;
}

message Conversation {
    string id = 1;
    string other_user_id = 2;
    string job_id = 3;
    Message last_message = 4;
    int32 unread_count = 5;
}

message GetConversationsResponse {
    repeated Conversation conversations = 1;
    int32 total = 2;
}

service ChatService {
    // Send a message to a specific user
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
    
    // Get messages between two users, optionally filtered by job
    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
    
    // Broadcast a message to all shortlisted candidates for a job
    rpc BroadcastMessage(BroadcastMessageRequest) returns (BroadcastMessageResponse);
    
    // Update message status (sent, delivered, read)
    rpc UpdateMessageStatus(UpdateMessageStatusRequest) returns (UpdateMessageStatusResponse);
    
    // Get all conversations for a user
    rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse);
    
    // Stream messages in real-time
    rpc StreamMessages(google.protobuf.Empty) returns (stream Message);
}syntax = "proto3";

package notification;

option go_package = "github.com/skillsync/skillsync-protos/gen/notificationpb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Notification {
    string id = 1;
    string user_id = 2;
    string title = 3;
    string message = 4;
    bool read = 5;
    google.protobuf.Timestamp created_at = 6;
    string type = 7;
    map<string, string> metadata = 8;
}

message CreateNotificationRequest {
    string user_id = 1;
    string title = 2;
    string message = 3;
    string type = 4;
    map<string, string> metadata = 5;
}

message CreateNotificationResponse {
    string notification_id = 1;
}

message GetNotificationsRequest {
    string user_id = 1;
    bool unread_only = 2;
    int32 limit = 3;
    int32 offset = 4;
}

message GetNotificationsResponse {
    repeated Notification notifications = 1;
    int32 total = 2;
}

message MarkAsReadRequest {
    string notification_id = 1;
}

message MarkAsReadResponse {
    bool success = 1;
}

service NotificationService {
    rpc CreateNotification(CreateNotificationRequest) returns (CreateNotificationResponse);
    rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
    rpc MarkAsRead(stream MarkAsReadRequest) returns (stream MarkAsReadResponse);
    rpc StreamNotifications(google.protobuf.Empty) returns (stream Notification);
}syntax = "proto3";

package notification;

option go_package = "github.com/skillsync/skillsync-protos/gen/notificationpb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Notification {
    string id = 1;
    string user_id = 2;
    string title = 3;
    string message = 4;
    bool read = 5;
    google.protobuf.Timestamp created_at = 6;
    string type = 7;
    map<string, string> metadata = 8;
}

message CreateNotificationRequest {
    string user_id = 1;
    string title = 2;
    string message = 3;
    string type = 4;
    map<string, string> metadata = 5;
}

message CreateNotificationResponse {
    string notification_id = 1;
}

message GetNotificationsRequest {
    string user_id = 1;
    bool unread_only = 2;
    int32 limit = 3;
    int32 offset = 4;
}

message GetNotificationsResponse {
    repeated Notification notifications = 1;
    int32 total = 2;
}

message MarkAsReadRequest {
    string notification_id = 1;
}

message MarkAsReadResponse {
    bool success = 1;
}

service NotificationService {
    rpc CreateNotification(CreateNotificationRequest) returns (CreateNotificationResponse);
    rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
    rpc MarkAsRead(stream MarkAsReadRequest) returns (stream MarkAsReadResponse);
    rpc StreamNotifications(google.protobuf.Empty) returns (stream Notification);
}syntax = "proto3";

package notification;

option go_package = "github.com/skillsync/skillsync-protos/gen/notificationpb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Notification {
    string id = 1;
    string user_id = 2;
    string title = 3;
    string message = 4;
    bool read = 5;
    google.protobuf.Timestamp created_at = 6;
    string type = 7;
    map<string, string> metadata = 8;
}

message CreateNotificationRequest {
    string user_id = 1;
    string title = 2;
    string message = 3;
    string type = 4;
    map<string, string> metadata = 5;
}

message CreateNotificationResponse {
    string notification_id = 1;
}

message GetNotificationsRequest {
    string user_id = 1;
    bool unread_only = 2;
    int32 limit = 3;
    int32 offset = 4;
}

message GetNotificationsResponse {
    repeated Notification notifications = 1;
    int32 total = 2;
}

message MarkAsReadRequest {
    string notification_id = 1;
}

message MarkAsReadResponse {
    bool success = 1;
}

service NotificationService {
    rpc CreateNotification(CreateNotificationRequest) returns (CreateNotificationResponse);
    rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
    rpc MarkAsRead(stream MarkAsReadRequest) returns (stream MarkAsReadResponse);
    rpc StreamNotifications(google.protobuf.Empty) returns (stream Notification);
}syntax = "proto3";

package chat;

option go_package = "github.com/skillsync/skillsync-protos/gen/chatpb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

enum MessageStatus {
    SENT = 0;
    DELIVERED = 1;
    READ = 2;
}

message Message {
    string id = 1;
    string sender_id = 2;
    string receiver_id = 3;
    string content = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    string job_id = 7;
    bool is_broadcast = 8;
    MessageStatus status = 9;
    string message_type = 10;
}

message SendMessageRequest {
    string receiver_id = 1;
    string content = 2;
    string job_id = 3;
    bool is_broadcast = 4;
    string message_type = 5;
}

message SendMessageResponse {
    string message_id = 1;
    bool success = 2;
}

message GetMessagesRequest {
    string user_id = 1;
    string other_user_id = 2;
    string job_id = 3;
    int32 page = 4;
    int32 limit = 5;
}

message GetMessagesResponse {
    repeated Message messages = 1;
    int32 total = 2;
}

message BroadcastMessageRequest {
    string job_id = 1;
    string content = 2;
    string message_type = 3;
}

message BroadcastMessageResponse {
    bool success = 1;
    int32 recipients_count = 2;
}

message UpdateMessageStatusRequest {
    string message_id = 1;
    MessageStatus status = 2;
}

message UpdateMessageStatusResponse {
    bool success = 1;
}

message GetConversationsRequest {
    string user_id = 1;
    int32 page = 2;
    int32 limit = 3;
}

message Conversation {
    string id = 1;
    string other_user_id = 2;
    string job_id = 3;
    Message last_message = 4;
    int32 unread_count = 5;
}

message GetConversationsResponse {
    repeated Conversation conversations = 1;
    int32 total = 2;
}

service ChatService {
    // Send a message to a specific user
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
    
    // Get messages between two users, optionally filtered by job
    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
    
    // Broadcast a message to all shortlisted candidates for a job
    rpc BroadcastMessage(BroadcastMessageRequest) returns (BroadcastMessageResponse);
    
    // Update message status (sent, delivered, read)
    rpc UpdateMessageStatus(UpdateMessageStatusRequest) returns (UpdateMessageStatusResponse);
    
    // Get all conversations for a user
    rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse);
    
    // Stream messages in real-time
    rpc StreamMessages(google.protobuf.Empty) returns (stream Message);
}
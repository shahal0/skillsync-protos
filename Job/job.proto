syntax = "proto3";

package jobservice;

option go_package = "./gen/jobpb";

// Job status values
// Possible values: OPEN, CLOSED, DRAFT

// Job message - comprehensive definition matching your model
message Job {
  uint64 id = 1; // Changed from string to uint64 to match Go uint type
  string employer_id = 2;
  string title = 3;
  string description = 4;
  string category = 5;
  repeated JobSkill required_skills = 6; // Skills are included in the job response
  int64 salary_min = 7;
  int64 salary_max = 8;
  string location = 9;
  int32 experience_required = 10;
  string status = 11; // Possible values: OPEN, CLOSED, DRAFT
}

// JobSkill message - matching your model
message JobSkill {
  string job_id = 1; // Using string to match Go implementation
  string skill = 2;
  string proficiency = 3; // e.g., Beginner, Intermediate, Expert
}

// JobSkills represents a collection of skills for a job
message JobSkills {
  repeated JobSkill skills = 1;
}

// Application message - matching your model
message Application {
  uint64 id = 1; // Changed from string to uint64
  uint64 job_id = 2; // Changed from string to uint64
  string candidate_id = 3;
  string status = 4; // Applied, Viewed, Shortlisted, Rejected
  string resume_url = 5; // Optional field for resume URL
}

// PostJob request/response
message PostJobRequest {
  string title = 1;
  string description = 2;
  string category = 3;
  repeated JobSkill required_skills = 4;
  int64 salary_min = 5;
  int64 salary_max = 6;
  string location = 7;
  int32 experience_required = 8;
  string employer_id = 9; // Will be extracted from token in implementation
}

message PostJobResponse {
  uint64 job_id = 1; // Changed from string to uint64
  string message = 2;
}

// GetJobs request/response with filters
message GetJobsRequest {
  string category = 1; // Optional category filter
  string keyword = 2;  // Optional keyword search
  string location = 3; // Optional location filter
  int32 experience_required = 4; // Optional experience required filter (in years)
}

message GetJobsResponse {
  repeated Job jobs = 1;
}

// GetJobById request/response
message GetJobByIdRequest {
  uint64 job_id = 1; // Changed from string to uint64
}

message GetJobByIdResponse {
  Job job = 1;
}

// ApplyToJob request/response
message ApplyToJobRequest {
  uint64 job_id = 1; // Changed from string to uint64
  string candidate_id = 2; // Will be extracted from token in implementation
  string resume_url = 3; // Optional - can be retrieved from candidate profile
}

message ApplyToJobResponse {
  uint64 application_id = 1; // Changed from string to uint64
  string message = 2;
}

// GetApplications request/response
message GetApplicationsRequest {
  uint64 job_id = 1; // For employer to view applications for a job
  string candidate_id = 2; // For candidate to view their applications
  string status = 3; // Filter by status
}

message GetApplicationsResponse {
  repeated Application applications = 1;
}

// UpdateApplicationStatus request/response
message UpdateApplicationStatusRequest {
  string application_id = 1;
  string status = 2; // New status: Viewed, Shortlisted, Rejected
  string employer_id = 3; // Will be extracted from token in implementation
}

message UpdateApplicationStatusResponse {
  string message = 1;
}

// AddJobSkills request/response
message AddJobSkillsRequest {
  uint64 job_id = 1; // Changed to uint64 to match Job ID type
  repeated JobSkill skills = 2; // Multiple skills can be added at once
}

message AddJobSkillsResponse {
  string message = 1;
}

// UpdateJobStatus request/response
message UpdateJobStatusRequest {
    string job_id = 1;
    string status = 2;  // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
    string employer_id = 3;  // Will be extracted from token
}

message UpdateJobStatusResponse {
    string message = 1;
}

// Service definition
service JobService {
    // Core job operations
    rpc PostJob(PostJobRequest) returns (PostJobResponse);
    rpc GetJobs(GetJobsRequest) returns (GetJobsResponse);
    rpc GetJobById(GetJobByIdRequest) returns (GetJobByIdResponse);
    rpc UpdateJobStatus(UpdateJobStatusRequest) returns (UpdateJobStatusResponse);
    
    // Application operations
    rpc ApplyToJob(ApplyToJobRequest) returns (ApplyToJobResponse);
    rpc GetApplications(GetApplicationsRequest) returns (GetApplicationsResponse);
    rpc UpdateApplicationStatus(UpdateApplicationStatusRequest) returns (UpdateApplicationStatusResponse);
    
    // Skills operations
    rpc AddJobSkills(AddJobSkillsRequest) returns (AddJobSkillsResponse);
}
